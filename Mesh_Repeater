#include "Particle.h"
// Library for VCO706 camera
#include <camera_VC0706.h>
// Library for SD-card
#include <SD.h>

// Set system mode to semi automatic which will call setup without trying to connect to the mesh-network
SYSTEM_MODE(SEMI_AUTOMATIC);
// Set system thread to enabled for to allow the user to publish and subscribe code to continue even if youâ€™re 
//disconnected the gateway from the Internet or even turned the gateway off. 
SYSTEM_THREAD(ENABLED);

// Decleare functions
void EndNoteHandler(const char *event, const char *data);
void RepeaterEndnoteHandler(const char *event, const char *data);

// Set serial connection for camera
cameraconnection = Serial2(4, 5);
camera_VC0706 cam = camera_VC0706(&cameraconnection);

// Set variables for timing of image capture
const unsigned long PUBLISH_INTERVAL_MS = 10000;
unsigned long lastPublish = 0;



void setup() {
    // Set SS 
    pinMode(6, OUTPUT); 
    
    // Set serial communication for debugging
	Serial.begin(9600);
	Log.info("VC0706 Camera test");
	
	// Check if SD is present
	if (!SD.begin(chipSelect)) {
		Log.info("Card failed, or not present");
		return;
	}
	
	// Check if camera is present
	if (cam.begin()) {
		Log.info("Camera Found:");
	} else {
		Log.error("No camera found?");
		return;
	}
	
	// Set image capture size
    cam.setImageSize(VC0706_640x480);
    
    // Set bit ANSTW1 and ANSTW2 for use of external antenna
    digitalWrite(ANTSW1, 0);
    digitalWrite(ANTSW1, 1);
    
    // Connect to the mesh network
    Mesh.connect();
    // Wait for the mesh to be connected and reset device if connection is not established
    delay(5000);
    if(Mesh.connecting)){
        
    } else{
        System.reset();
    }
    
    // Subscribe to the temperature and humidity from endnotes
    Mesh.subscribe("Endnote", EndNoteHandler);
    // Subscribe to gateway authentication
    // Mesh.subscribe("Gateway", Gateway handler);
    // Possibility for adding more camera repeaters
    // Mesh.subscribe("Repeater", repeater_buffer);
}

void loop() {
    //Take picture
    if (millis() - lastPublish >= PUBLISH_INTERVAL_MS) {
		lastPublish = millis();
		
		if (! cam.takePicture())
				Serial.println("Failed to snap!");
			else
				Serial.println("Picture taken!");
			char filename[13];
			strcpy(filename, "IMAGE00.JPG");
			for (int i = 0; i < 100; i++) {
				filename[5] = '0' + i/10;
				filename[6] = '0' + i%10;
				// Create if does not exist, do not open existing, write, sync after write
				if (! SD.exists(filename)) {
					break;
				}
			}
			File imgFile = SD.open(filename, FILE_WRITE);
			uint16_t jpglen = cam.frameLength();
			Serial.print(jpglen, DEC);
			Serial.println(" byte image");

			Serial.print("Writing image to ");
			Serial.print(filename);

			while (jpglen > 0) {
				// Reading 32bytes
				uint8_t *buffer;
				uint8_t bytesToRead =  min(32, jpglen);
				buffer = cam.readPicture(bytesToRead);
				imgFile.write(buffer, bytesToRead);
				jpglen -= bytesToRead;
			}
			imgFile.close();
			Serial.println("...Done!");
	        cam.resumeVideo();
	    // Find a way to send JPEG over BLE 
		//Mesh.publish(EVENT_NAME, data);
	}
}

// Handler function for incomming endnote mesh data
void EndNoteHandler(const char *event, const char *data)
{
    // Serial print for debugging
    Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
    // Send the data to a gateway of the next repeater
    Mesh.publish("RepeaterEndnote", data);
}

void RepeaterEndnoteHandler(const char *event, const char *data)
{
    // Serial print for debugging
    Serial.printlnf("event=%s data=%s", event, data ? data : "NULL");
    // Send the data to a gateway of the next repeater
    Mesh.publish("Repeater2Endnote", data);
}

